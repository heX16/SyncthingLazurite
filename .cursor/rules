# Project Rules for SyncthingLazurite

## Project Overview
SyncthingLazurite is a lightweight desktop companion for Syncthing, built with Lazarus/FreePascal. It connects to local Syncthing via REST/Event APIs, maintains a unified JSON tree of Syncthing state, and displays devices, folders, and events in a simple UI with system tray integration.

## Essential Reading
**ALWAYS read `info.md` first** - it contains comprehensive technical documentation about:
- Project architecture and module relationships
- JSONTree data model (the core concept)
- syncthing_api.pas details (FSM, HTTP clients, endpoints)
- Threading model and data synchronization
- Network protocols and UI implementation

## Development Guidelines

Write all comments in English

The project uses Pascal FPC and Lazarus.

### Architecture Principles
- JSONTree (`FTreeRoot`) is the single source of truth for all Syncthing data
- All network updates flow through `TSyncthingAPI` and update the JSON tree atomically
- UI components read from JSONTree via typed pointers (`config_folders`, `config_devices`, etc.)
- Use `OnTreeChanged` events to update UI when data changes

### Key Modules (read info.md for details)
- `syncthing_api.pas` - Core API client with FSM and JSONTree management
- `AsyncHTTP.pas` - HTTP request queue with worker thread
- `uModuleMain.pas` - Main GUI logic and event handling
- `uFormMain.pas` - Main form with device/folder trees
- `uModuleCore.pas` - old module, will remove.

### When Making Changes
1. Understand the JSONTree concept and data flow
2. Check if changes affect the FSM states or HTTP handling
3. Test connection/disconnection scenarios
4. Verify UI updates correctly on data changes

## Notes
- The app is designed to be very lightweight with minimal memory/CPU usage
- Long-polling events drive most real-time updates
